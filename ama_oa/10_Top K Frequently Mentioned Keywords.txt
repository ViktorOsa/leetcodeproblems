Given a list of reviews, a list of keywords and an integer k. Find the most popular k keywords in order of most to least frequently mentioned.

The comparison of strings is case-insensitive.
Multiple occurances of a keyword in a review should be considred as a single mention.
If keywords are mentioned an equal number of times in reviews, sort alphabetically.

Example 1:

Input:
k = 2
keywords = ["anacell", "cetracular", "betacellular"]
reviews = [
  "Anacell provides the best services in the city",
  "betacellular has awesome services",
  "Best services provided by anacell, everyone should use anacell",
]

Output:
["anacell", "betacellular"]

Explanation:
"anacell" is occuring in 2 different reviews and "betacellular" is only occuring in 1 review.
Example 2:

Input:
k = 2
keywords = ["anacell", "betacellular", "cetracular", "deltacellular", "eurocell"]
reviews = [
  "I love anacell Best services; Best services provided by anacell",
  "betacellular has great services",
  "deltacellular provides much better services than betacellular",
  "cetracular is worse than anacell",
  "Betacellular is better than deltacellular.",
]

Output:
["betacellular", "anacell"]

Explanation:
"betacellular" is occuring in 3 different reviews. "anacell" and "deltacellular" are occuring in 2 reviews, but "anacell" is lexicographically smaller.


another:
import string
def preprocess(word):
  result = ""
  for c in word:
    if c not in string.punctuation:
      result += c.lower()
  return result

def topKMostFrequentKeyWords(k,keywords,reviews):

  count = {} # Map keywords to the number of times they occur
  
  kw = set([w.lower() for w in keywords]) # Store keywords in a set (make sure they are lowercase)

  # Iterate through each review
  for review in reviews:
    seen = set() # Use a set to make sure we count each keyword only once per review
    words = review.split(" ") # Split review into words
    # Iterate through each word in the review
    for word in words:
      w = preprocess(word) # Preprocess the word to convert to lower case, and strip punctuation
      if w in kw and w not in seen:
        count[w] = count.get(w,0) + 1
        seen.add(w)

  # Sort key,value pairs descending order of frequency, ascending order of lexicographical
  sortedFrequencies = sorted(count.items(),key=lambda x: (-x[1],x[0]) )

  # Return just top k keywords
  return [x[0] for x in sortedFrequencies[:k]]

#2 

Given a non-empty list of words, return the k most frequent elements.

Your answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.

Example 1:
Input: ["i", "love", "leetcode", "i", "love", "coding"], k = 2
Output: ["i", "love"]
Explanation: "i" and "love" are the two most frequent words.
    Note that "i" comes before "love" due to a lower alphabetical order.

  def topKFrequent(self, words, k):
        d = {}
        for word in words:
            d[word] = d.get(word, 0) + 1
        
        ret = sorted(d, key=lambda word: (-d[word], word))
        
        return ret[:k]